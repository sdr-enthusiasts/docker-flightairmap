#!/command/with-contenv /bin/bash
#shellcheck shell=bash

if [ -n "${VERBOSE_LOGGING}" ]; then
  set -x
fi

NOCOLOR='\033[0m'
LIGHTGREEN='\033[1;32m'
LIGHTCYAN='\033[1;36m'
LIGHTRED='\033[1;31m'
# YELLOW='\033[1;33m'

if [ -n "${MYSQLHOSTNAME}" ]; then
  # if using external database
  echo "Waiting for database..."
  while :
  do
    if mysqladmin \
      --host="${MYSQLHOSTNAME}" \
      --port="${MYSQLPORT}" \
      --user="${MYSQLUSERNAME}" \
      --password="${MYSQLPASSWORD}" \
      status > /dev/null 2>&1; then
      echo ""
      break
    fi
    echo -n "."
    sleep 1
  done
  echo "Database ready."
fi

# Only run the following commands if using local database
if [ -z "${MYSQLHOSTNAME}" ]; then
  # Check if the flightairmap database exists
  # Start mysqld without permissions
  /usr/sbin/mysqld --skip-networking --console --log-error='' --skip-grant-tables --silent-startup --user=root &
  # Wait for mysqld to init
  while :
  do
    if mysqladmin status > /dev/null 2>&1; then
      break
    fi
    sleep 0.5
  done
fi

# See if flightairmap database exists
if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  if mysqlshow "${MYSQLDATABASE}" > /dev/null 2>&1; then
      # if it does, do nothing
      mysqladmin shutdown
      exit 0
  fi
else
  # if using external database
  NUMTABLES=$(mysqlanalyze \
    --host="${MYSQLHOSTNAME}" \
    --port="${MYSQLPORT}" \
    --user="${MYSQLUSERNAME}" \
    --password="${MYSQLPASSWORD}" \
    "${MYSQLDATABASE}" | wc -l)
  if [ "$NUMTABLES" -gt 0 ]; then
      # if it does, do nothing
      exit 0
  fi
fi

# if it doesn't, then do the first run tasks
echo -e "${LIGHTCYAN}"
echo "New installation detected. Performing first-run tasks..."
echo "This takes a very long time, please be patient!"
echo -e "${NOCOLOR}"

# Start temporary services
echo -e "${LIGHTCYAN}Starting temporary services... ${NOCOLOR}"

if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  # Generate random passwords
  MYSQLROOTPASSWORD="$(pwgen -cns 30 999 | tail -1)"
  MYSQLPASSWORD="$(pwgen -cns 30 999 | tail -1)"

  mysqladmin shutdown
  /usr/sbin/mysqld --console --log-error='' --silent-startup --user=root &
  # Wait for mysqld to init
  echo "Waiting for database..."
  while :
  do
    if mysqladmin status > /dev/null 2>&1; then
      echo ""
      break
    fi
    echo -n "."
    sleep 1
  done
  echo "Database ready."
fi

# temporarily disable nginx logging
sed -i 's/access_log\ \/dev\/stdout\;/#&/' /etc/nginx/nginx.conf
sed -i 's/error_log\ \/dev\/stdout/#&/' /etc/nginx/nginx.conf

# Start temporary services
/usr/sbin/php-fpm7.4 --daemonize
/usr/sbin/nginx -g "daemon on; error_log /dev/null crit;"

# re-enable nginx access log
sed -i '/#access_log\ \/dev\/stdout\;/s/#//' /etc/nginx/nginx.conf
sed -i '/#error_log\ \/dev\/stdout/s/#//' /etc/nginx/nginx.conf

# if using local database
if [ -z "${MYSQLHOSTNAME}" ]; then
  # Set mysql root password
  mysqladmin -u root password "${MYSQLROOTPASSWORD}"
  mysql -u root -D mysql --password="${MYSQLROOTPASSWORD}" -e "GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;"
  mysql -u root -D mysql --password="${MYSQLROOTPASSWORD}" -e "FLUSH PRIVILEGES ;"
fi

########## Running install/index.php ##########
echo -e "${LIGHTCYAN}Running install/index.php${NOCOLOR}"

# Initial visit to install/index.php to set up session cookie
curl 'http://127.0.0.1/install/index.php' \
  -v \
  --cookie-jar /tmp/install_process_cookies \
  --compressed > /tmp/curl_install_01.log 2>&1

# If no install password given, generate a random one. User can always pull it from settings.php.
if [ -z "${FAM_INSTALLPASSWORD}" ]; then
  FAM_INSTALLPASSWORD="$(pwgen -cns 30 999 | tail -1)"
fi

# Prepare install/index.php POST data
INSTALLPOSTDATA="installpass="
INSTALLPOSTDATA+=$(php -r "echo urlencode('$FAM_INSTALLPASSWORD');")
INSTALLPOSTDATA+="&dbtype=mysql"
if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  INSTALLPOSTDATA+="&createdb=createdb"
fi
INSTALLPOSTDATA+="&dbroot="
if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  INSTALLPOSTDATA+=$(php -r "echo urlencode('root');")
fi
INSTALLPOSTDATA+="&dbrootpass="
if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  INSTALLPOSTDATA+=$(php -r "echo urlencode('$MYSQLROOTPASSWORD');")
fi
INSTALLPOSTDATA+="&dbhost="
if [ -z "${MYSQLHOSTNAME}" ]; then
  # if using local database
  INSTALLPOSTDATA+=$(php -r "echo urlencode('localhost');")
else
  # if using external database
  INSTALLPOSTDATA+=$(php -r "echo urlencode('$MYSQLHOSTNAME');")
fi
INSTALLPOSTDATA+="&dbport="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${MYSQLPORT}');")
INSTALLPOSTDATA+="&dbname="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${MYSQLDATABASE}');")
INSTALLPOSTDATA+="&dbuser="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${MYSQLUSERNAME}');")
INSTALLPOSTDATA+="&dbuserpass="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${MYSQLPASSWORD}');")
INSTALLPOSTDATA+="&sitename="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_GLOBALSITENAME}');")
INSTALLPOSTDATA+="&siteurl=&timezone="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${TZ}');")
INSTALLPOSTDATA+="&language="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LANGUAGE}');")
INSTALLPOSTDATA+="&mapprovider="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_MAPPROVIDER}');")
INSTALLPOSTDATA+="&mapboxid="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_MAPBOXID}');")
INSTALLPOSTDATA+="&mapboxtoken="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_MAPBOXTOKEN}');")
INSTALLPOSTDATA+="&googlekey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_GOOGLEKEY}');")
INSTALLPOSTDATA+="&bingkey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_BINGKEY}');")
INSTALLPOSTDATA+="&mapquestkey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_MAPQUESTKEY}');")
INSTALLPOSTDATA+="&hereappid="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_HEREAPPID}');")
INSTALLPOSTDATA+="&hereappcode="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_HEREAPPCODE}');")
INSTALLPOSTDATA+="&openweathermapkey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_OPENWEATHERMAPKEY}');")
INSTALLPOSTDATA+="&latitudemax="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LATITUDEMAX}');")
INSTALLPOSTDATA+="&latitudemin="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LATITUDEMIN}');")
INSTALLPOSTDATA+="&longitudemax="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LONGITUDEMAX}');")
INSTALLPOSTDATA+="&longitudemin="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LONGITUDEMIN}');")
INSTALLPOSTDATA+="&latitudecenter="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LATITUDECENTER}');")
INSTALLPOSTDATA+="&longitudecenter="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LONGITUDECENTER}');")
INSTALLPOSTDATA+="&livezoom="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LIVEZOOM}');")
INSTALLPOSTDATA+="&squawk_country="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_SQUAWK_COUNTRY}');")
INSTALLPOSTDATA+="&zoilatitude=&zoilongitude=&zoidistance=&source_name%5B%5D=&source_latitude%5B%5D=&source_longitude%5B%5D=&source_altitude%5B%5D=&source_city%5B%5D=&source_country%5B%5D=&source_ref%5B%5D=&globalaircraft=aircraft&globalsbs=sbs&sailawayemail="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_SAILAWAYEMAIL}');")
INSTALLPOSTDATA+="&sailawaypassword="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_SAILAWAYPASSWORD}');")
INSTALLPOSTDATA+="&sailawaykey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_SAILAWAYKEY}');")
INSTALLPOSTDATA+="&host%5B%5D=127.0.0.1&port%5B%5D=30003&format%5B%5D=auto&name%5B%5D=&timezones%5B%5D=UTC&host%5B%5D=&port%5B%5D=&format%5B%5D=auto&name%5B%5D=&timezones%5B%5D=UTC&acarshost=0.0.0.0&acarsport=9999&newsurl%5B%5D=&newslang%5B%5D=en&newstype%5B%5D=global&crash=crash&map3d=map3d&map3dtileset=&map3dshadows=map3dshadows&corsproxy=https%3A%2F%2Fgalvanize-cors-proxy.herokuapp.com%2F&translate=translate&estimation=estimation&unitdistance=km&unitaltitude=m&unitspeed=kmh&schedules=schedules&britishairways="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_BRITISHAIRWAYSAPIKEY}');")
INSTALLPOSTDATA+="&corsproxy="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_CORSPROXY}');")
INSTALLPOSTDATA+="&lufthansakey="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LUFTHANSAKEY}');")
INSTALLPOSTDATA+="&lufthansasecret="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_LUFTHANSASECRET}');")
INSTALLPOSTDATA+="&flightawareusername="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_FLIGHTAWAREUSERNAME}');")
INSTALLPOSTDATA+="&flightawarepassword="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_FLIGHTAWAREPASSWORD}');")
INSTALLPOSTDATA+="&mapmatchingsource="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_MAPMATCHINGSOURCE}');")
INSTALLPOSTDATA+="&graphhopper="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_GRAPHHOPPERAPIKEY}');")
INSTALLPOSTDATA+="&notam=notam&notamsource="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_NOTAMSOURCE}');")
INSTALLPOSTDATA+="&metar=metar&metarcycle=metarcycle&metarsource="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_METARSOURCE}');")
INSTALLPOSTDATA+="&bitly="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_BITLYACCESSTOKENAPI}');")
INSTALLPOSTDATA+="&waypoints=waypoints&geoid=geoid&geoid_source="
INSTALLPOSTDATA+=$(php -r "echo urlencode('${FAM_GEOID_SOURCE}');")
INSTALLPOSTDATA+="&resetyearstats=1&archiveresults=archiveresults&archivemonths=0&archivekeepmonths=0&archivekeeptrackmonths=0&daemon=daemon&cronend=0&colormap=colormap&flightroute=flightroute&flightremainingroute=flightremainingroute&allflights=allflights&refresh=200&maprefresh=30&mapidle=30&minfetch=50&closestmindist=50&aircraftsize=&airportzoom=7&customcss=&submit=Create%2FUpdate+database+%26+write+setup"

# Mimic filling out install/index.php form and submitting
curl 'http://127.0.0.1/install/index.php' \
  -v \
  --cookie /tmp/install_process_cookies \
  --cookie-jar /tmp/install_process_cookies \
  --compressed \
  -H 'Referer: http://127.0.0.1/install/index.php' \
  -H 'Connection: keep-alive' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  --data "${INSTALLPOSTDATA}" > /tmp/curl_install_02.log 2>&1

# Get the next location from the output of previous command
NEXTLOCATION=$(grep -oP "window\.location\s+=\s+'.*'" /tmp/curl_install_02.log | cut -d "'" -f 2)

# Visit the next location
curl "http://127.0.0.1/install/${NEXTLOCATION}" \
  -v \
  --cookie /tmp/install_process_cookies \
  --cookie-jar /tmp/install_process_cookies \
  -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
  --compressed \
  -H 'Connection: keep-alive' \
  -H 'Referer: http://127.0.0.1/install/index.php' >> /tmp/curl_install_03.log 2>&1

# Wait for the install to finish...
while :
do

  # Get JSON status of install, output to temp file
  if [ -n "${VERBOSE_LOGGING}" ]; then
    date
    curl 'http://127.0.0.1/install/install-action.php' \
      --verbose \
      --progress-bar \
      --cookie /tmp/install_process_cookies \
      --cookie-jar /tmp/install_process_cookies \
      -H 'Accept: application/json, text/javascript, */*; q=0.01' \
      -H "Referer: http://127.0.0.1/install/${NEXTLOCATION}" \
      --compressed \
      -H 'X-Requested-With: XMLHttpRequest' \
      -H 'Connection: keep-alive' \
      --cookie-jar /tmp/install_process_cookies > /tmp/install_process_status_json
    date
    echo "Response JSON:"
    cat /tmp/install_process_status_json
    echo "End response JSON."
  else
    curl 'http://127.0.0.1/install/install-action.php' \
      --silent \
      --cookie /tmp/install_process_cookies \
      --cookie-jar /tmp/install_process_cookies \
      -H 'Accept: application/json, text/javascript, */*; q=0.01' \
      -H "Referer: http://127.0.0.1/install/${NEXTLOCATION}" \
      --compressed \
      -H 'X-Requested-With: XMLHttpRequest' \
      -H 'Connection: keep-alive' \
      --cookie-jar /tmp/install_process_cookies > /tmp/install_process_status_json
  fi

  # # check to make sure the json is valid
  # if ! jq "." < /tmp/install_process_status_json > /dev/null 2>&1; then
  #   echo ""
  #   echo -e "${YELLOW}WARNING: Invalid JSON returned:${NOCOLOR}"
  #   cat /tmp/install_process_status_json
  #   echo ""
  #   echo -e "${YELLOW}Attempting to continue...${NOCOLOR}"
  #   echo ""
  #   break
  # fi

  # Get info from json
  INSTALLERROR=$(jq ".error" < /tmp/install_process_status_json)
  INSTALLNEXT=$(jq ".next" < /tmp/install_process_status_json)
  INSTALLPHASE=$(jq ".install" < /tmp/install_process_status_json)

  # Check for errors with install
  if [ "${INSTALLERROR}" = '""' ]
  then

    # If no error, then print status and wait until finished
    echo -e "${LIGHTCYAN} - Installation status: ${INSTALLPHASE} / ${INSTALLNEXT}${NOCOLOR}"
    if [ "$INSTALLNEXT" = '"finish"' ]
    then
      if [ "$INSTALLPHASE" = '"finish"' ]
      then
        echo -e "${LIGHTCYAN}Running install/index.php completed successfully!${NOCOLOR}"
        break
      fi
    fi

  else
    # If error, output json and exit
    jq "." < /tmp/install_process_status_json
    echo ""
    echo -e "${LIGHTRED}${INSTALLERROR}${NOCOLOR}"
    echo ""
    exit 1
  fi

  sleep 1
done

# Get final status of install
curl 'http://127.0.0.1/install/index.php?next=finish' \
  --silent \
  --cookie /tmp/install_process_cookies \
  --cookie-jar /tmp/install_process_cookies \
  -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
  --compressed \
  -H 'Connection: keep-alive' \
  -H "Referer: http://127.0.0.1/install/${NEXTLOCATION}" > /tmp/curl_install_04.log

# Output status of install
html2text /tmp/curl_install_04.log | grep "\* "

# Initial run of scripts/update_db.php
echo -e "${LIGHTCYAN}Performing first-run of scripts/update_db.php, this will take a very long time...${NOCOLOR}"
s6-setuidgid "${WEBUSER}" php /var/www/flightairmap/htdocs/scripts/update_db.php 2>&1 | \
  mawk -W Interactive '! / Parameter must be an array or an object that implements Countable in /'

# Stop temporary services
echo -e "${LIGHTCYAN}  - Stopping temporary services... ${NOCOLOR}"
pkill nginx
pkill php-fpm
# if using local database
if [ -z "${MYSQLHOSTNAME}" ]; then
  mysqladmin -u root --password="${MYSQLROOTPASSWORD}" shutdown
fi

echo -e "${LIGHTGREEN}First-run tasks finished OK (finally!)...${NOCOLOR}"
echo ""
